'use strict'; /*!
               *
               *  Web Starter Kit
               *  Copyright 2015 Google Inc. All rights reserved.
               *
               *  Licensed under the Apache License, Version 2.0 (the "License");
               *  you may not use this file except in compliance with the License.
               *  You may obtain a copy of the License at
               *
               *    https://www.apache.org/licenses/LICENSE-2.0
               *
               *  Unless required by applicable law or agreed to in writing, software
               *  distributed under the License is distributed on an "AS IS" BASIS,
               *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
               *  See the License for the specific language governing permissions and
               *  limitations under the License
               *
               */
/* eslint-env browser */
(function () {
  'use strict';

  // Your custom JavaScript goes here
  var app = {};
  var lastQueryLocation = new google.maps.LatLng({ lat: 0, lng: 0 });

  /* CONSTANTS */
  var GOOGLE_MAP_OPTIONS = {
    zoom: 13,
    center: new google.maps.LatLng(37.7703706, -122.3871226),
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    mapTypeControl: false,
    streetViewControl: false };


  // google map markers
  var G_MARKER = {
    path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',
    fillColor: '#607d8b',
    fillOpacity: 0.7,
    scale: 0.7,
    strokeColor: '#607d8b',
    strokeWeight: 3 };

  var G_MARKER_SELECTED = {
    path: 'M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z',
    fillColor: '#009688',
    fillOpacity: 0.8,
    scale: 0.8,
    strokeColor: '#009688',
    strokeWeight: 3 };



  /* CONTROLLER */
  app.controller = {};

  /* MODEL */
  app.model = {
    map: null, // google map object

    places: ko.observableArray([]).extend({ rateLimit: 100 }), // main places storage
    placesHash: new Map(), // helps to search place from foursquare place id
    markers: new WeakMap(), // helps to search place from google marker
    selectedPlaces: new Set(), // places marked on the map todo not in use now

    //Selected place
    placeInFocus: ko.observable(),
    isPlaceInFocusVisible: ko.observable(false),
    hideDetailsModal: function hideDetailsModal() {app.model.isPlaceInFocusVisible(false);},

    // error message
    isFailureModalVisible: ko.observable(false),
    hideFailureModal: function hideFailureModal() {app.model.isFailureModelVisible(false);},

    textFilter: ko.observable(''),

    filteredPlaces: ko.pureComputed(function () {
      var text = app.model.textFilter().trim().toLowerCase(),
      places = app.model.places();
      if (!text) return places;

      return _.filter(places, function (place) {return place.name.toLowerCase().indexOf(text) !== -1;});
    }),

    // show spinner?
    isLoading: ko.observable(false),

    // click on a place in menu handler
    onClickPlace: onClickPalace,

    // click on a map marker handler
    onClickMarker: onClickMarker };


  /**
                                     *  create a map, add map listener
                                     */
  app.controller.initApp = function initApp() {
    // init google map

    var map = new google.maps.Map(document.getElementById('google-map'), GOOGLE_MAP_OPTIONS);
    app.model.map = map;

    // Try HTML5 geolocation
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function (position) {
        var pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude };


        map.setCenter(pos);
      }, function () {
        //handleLocationError
      });
    } else {
        // Browser doesn't support Geolocation
      }

    map.addListener('bounds_changed', _.throttle(app.controller.loadPlaces, 3000));
  };

  /**
      * load bars from 4square
      */
  app.controller.loadPlaces = function loadPlaces() {
    var map = app.model.map;

    // dont ask 4square on big areas
    if (map.zoom < 16) return;

    //distance between this point and last request
    var distance = google.maps.geometry.spherical.computeDistanceBetween(lastQueryLocation, map.center);
    // don't load new data if point is too close to previous search
    if (distance < 1000) return;
    lastQueryLocation = map.center;
    app.model.isLoading(true);

    // load data from foursquare
    //TODO idea, calculate radius from map zoom
    var lat = map.center.lat(),
    lng = map.center.lng();
    var FoursquareRequestOptions = {
      ll: lat + ',' + lng,
      radius: 2000,
      section: 'drinks',
      client_id: 'E54BQ11LCWJ15Q0FH4MELITI2CZQ5KSJOU53TNRARJ3HHNXN',
      client_secret: 'T4O0ZURMG00IGUTU4NKSQZ4DH0E5LGLMDAE20OJWPXMBD10Y',
      v: 20160909 };

    $.get('https://api.foursquare.com/v2/venues/explore', FoursquareRequestOptions, app.controller.addPlaces).
    fail(function () {
      app.model.isFailureModelVisible(true);
    }).
    always(function () {
      app.model.isLoading(false);
    });
  };


  /**
      * add places to the map
      * @param res - results from foursquare request
      */
  app.controller.addPlaces = function (res) {
    //app.model.places.removeAll();

    res.response.groups[0].items.forEach(function (item) {
      if (app.model.placesHash.has(item.venue.id)) return; // don't allow to double items on the map

      var place = new Place(item);
      app.model.places.push(place);
      app.model.placesHash.set(item.venue.id, place);
      app.model.markers.set(place.marker, place);

    });

    // not more than 150 markers on the map
    var length = app.model.places.length;
    if (length > 150) app.controller.removePlacesFromStart(length - 150);

    app.model.isLoading(false);
  };

  /**
      * remove N places form the beginning of Array
      * @param N
        */
  app.controller.removePlacesFromStart = function (N) {
    var place = void 0;
    for (var i = 0; i < N; i++) {
      place = app.model.places.shift();
      place.marker.setMap(null);
      app.model.placesHash.delete(place.stash.venue.id);
      if (app.model.placeInFocus() === place) app.model.placeInFocus(null);
    }
  };

  /**
      * map place
      * @param item - one place from foursquare API response
      * @constructor
      */
  function Place(item) {
    var map = app.model.map;
    var lat = item.venue.location.lat,
    lng = item.venue.location.lng,
    name = item.venue.name;

    this.stash = item;
    this.location = { lat: lat, lng: lng };
    this.name = name;
    this.isSelected = ko.observable(false);
    this.marker = new google.maps.Marker({
      map: map,
      position: new google.maps.LatLng(lat, lng),
      icon: G_MARKER });

    this.marker.addListener('click', onClickMarker);
  }

  /**
     * user clicks on a place in the menu
     * @param place
     */
  function onClickPalace(place) {
    if (app.model.selectedPlaces.has(place)) return;

    // remove all selected
    var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {for (var _iterator = app.model.selectedPlaces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var selected = _step.value;
        selected.isSelected(false);
        selected.marker.setIcon(G_MARKER);
        app.model.selectedPlaces.delete(selected);
      }

      //add place to selected
    } catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}place.isSelected(true);
    app.model.selectedPlaces.add(place);

    // change marker icon and show place details modal window
    place.marker.setIcon(G_MARKER_SELECTED);
    app.model.placeInFocus(place);
    app.model.isPlaceInFocusVisible(true);

    app.model.map.panTo(place.location);

    // hide side menu on small screens after click
    if (window.matchMedia('(max-width: 426px)').matches) {
      $('.mdl-layout__drawer').removeClass('is-visible');
      $('.mdl-layout__obfuscator').removeClass('is-visible');
    }
  }

  /**
     * user clicks on a map marker
     */
  function onClickMarker() {
    var place = app.model.markers.get(this);
    onClickPalace(place);
  }

  // init app after loading page
  $(function () {
    ko.applyBindings(app.model);
    app.controller.initApp();
  });
})();
//# sourceMappingURL=data:application/json;base64,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QixJQUFJLEtBQXJCO0FBQ0EsUUFBSSxVQUFKLENBQWUsT0FBZjtBQUNELEdBSEQ7QUFJRCxDQXhQRCIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKlxuICogIFdlYiBTdGFydGVyIEtpdFxuICogIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2VcbiAqXG4gKi9cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gWW91ciBjdXN0b20gSmF2YVNjcmlwdCBnb2VzIGhlcmVcbiAgY29uc3QgYXBwID0ge307XG4gIGxldCBsYXN0UXVlcnlMb2NhdGlvbiA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoe2xhdDogMCwgbG5nOiAwfSk7XG5cbiAgLyogQ09OU1RBTlRTICovXG4gIGNvbnN0IEdPT0dMRV9NQVBfT1BUSU9OUyA9IHtcbiAgICB6b29tOiAxMyxcbiAgICBjZW50ZXI6IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoMzcuNzcwMzcwNiwgLTEyMi4zODcxMjI2KSxcbiAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLFxuICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZSxcbiAgICBzdHJlZXRWaWV3Q29udHJvbDogZmFsc2VcbiAgfTtcblxuICAvLyBnb29nbGUgbWFwIG1hcmtlcnNcbiAgY29uc3QgR19NQVJLRVIgPSB7XG4gICAgcGF0aDogJ00wLTQ4Yy05LjggMC0xNy43IDcuOC0xNy43IDE3LjQgMCAxNS41IDE3LjcgMzAuNiAxNy43IDMwLjZzMTcuNy0xNS40IDE3LjctMzAuNmMwLTkuNi03LjktMTcuNC0xNy43LTE3LjR6JyxcbiAgICBmaWxsQ29sb3I6ICcjNjA3ZDhiJyxcbiAgICBmaWxsT3BhY2l0eTogMC43LFxuICAgIHNjYWxlOiAwLjcsXG4gICAgc3Ryb2tlQ29sb3I6ICcjNjA3ZDhiJyxcbiAgICBzdHJva2VXZWlnaHQ6IDNcbiAgfTtcbiAgY29uc3QgR19NQVJLRVJfU0VMRUNURUQgPSB7XG4gICAgcGF0aDogJ00wLTQ4Yy05LjggMC0xNy43IDcuOC0xNy43IDE3LjQgMCAxNS41IDE3LjcgMzAuNiAxNy43IDMwLjZzMTcuNy0xNS40IDE3LjctMzAuNmMwLTkuNi03LjktMTcuNC0xNy43LTE3LjR6JyxcbiAgICBmaWxsQ29sb3I6ICcjMDA5Njg4JyxcbiAgICBmaWxsT3BhY2l0eTogMC44LFxuICAgIHNjYWxlOiAwLjgsXG4gICAgc3Ryb2tlQ29sb3I6ICcjMDA5Njg4JyxcbiAgICBzdHJva2VXZWlnaHQ6IDNcbiAgfTtcblxuXG4gIC8qIENPTlRST0xMRVIgKi9cbiAgYXBwLmNvbnRyb2xsZXIgPSB7fTtcblxuICAvKiBNT0RFTCAqL1xuICBhcHAubW9kZWwgPSB7XG4gICAgbWFwOiBudWxsLCAgICAgICAgICAgICAgICAgICAgICAvLyBnb29nbGUgbWFwIG9iamVjdFxuXG4gICAgcGxhY2VzOiBrby5vYnNlcnZhYmxlQXJyYXkoW10pLmV4dGVuZCh7IHJhdGVMaW1pdDogMTAwIH0pLCAvLyBtYWluIHBsYWNlcyBzdG9yYWdlXG4gICAgcGxhY2VzSGFzaDogbmV3IE1hcCgpLCAgICAgICAgICAvLyBoZWxwcyB0byBzZWFyY2ggcGxhY2UgZnJvbSBmb3Vyc3F1YXJlIHBsYWNlIGlkXG4gICAgbWFya2VyczogbmV3IFdlYWtNYXAoKSwgICAgICAgICAvLyBoZWxwcyB0byBzZWFyY2ggcGxhY2UgZnJvbSBnb29nbGUgbWFya2VyXG4gICAgc2VsZWN0ZWRQbGFjZXM6IG5ldyBTZXQoKSwgICAgICAvLyBwbGFjZXMgbWFya2VkIG9uIHRoZSBtYXAgdG9kbyBub3QgaW4gdXNlIG5vd1xuXG4gICAgLy9TZWxlY3RlZCBwbGFjZVxuICAgIHBsYWNlSW5Gb2N1czoga28ub2JzZXJ2YWJsZSgpLFxuICAgIGlzUGxhY2VJbkZvY3VzVmlzaWJsZToga28ub2JzZXJ2YWJsZShmYWxzZSksXG4gICAgaGlkZURldGFpbHNNb2RhbDogKCkgPT4ge2FwcC5tb2RlbC5pc1BsYWNlSW5Gb2N1c1Zpc2libGUoZmFsc2UpfSxcblxuICAgIC8vIGVycm9yIG1lc3NhZ2VcbiAgICBpc0ZhaWx1cmVNb2RhbFZpc2libGU6IGtvLm9ic2VydmFibGUoZmFsc2UpLFxuICAgIGhpZGVGYWlsdXJlTW9kYWw6ICgpID0+IHthcHAubW9kZWwuaXNGYWlsdXJlTW9kZWxWaXNpYmxlKGZhbHNlKX0sXG5cbiAgICB0ZXh0RmlsdGVyOiBrby5vYnNlcnZhYmxlKCcnKSxcblxuICAgIGZpbHRlcmVkUGxhY2VzOiBrby5wdXJlQ29tcHV0ZWQoKCkgPT4ge1xuICAgICAgbGV0IHRleHQgPSBhcHAubW9kZWwudGV4dEZpbHRlcigpLnRyaW0oKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgIHBsYWNlcyA9IGFwcC5tb2RlbC5wbGFjZXMoKTtcbiAgICAgIGlmICghdGV4dCkgcmV0dXJuIHBsYWNlcztcblxuICAgICAgcmV0dXJuIF8uZmlsdGVyKHBsYWNlcywgcGxhY2UgPT4gcGxhY2UubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGV4dCkgIT09IC0xICk7XG4gICAgfSksXG5cbiAgICAvLyBzaG93IHNwaW5uZXI/XG4gICAgaXNMb2FkaW5nOiBrby5vYnNlcnZhYmxlKGZhbHNlKSxcblxuICAgIC8vIGNsaWNrIG9uIGEgcGxhY2UgaW4gbWVudSBoYW5kbGVyXG4gICAgb25DbGlja1BsYWNlOiBvbkNsaWNrUGFsYWNlLFxuXG4gICAgLy8gY2xpY2sgb24gYSBtYXAgbWFya2VyIGhhbmRsZXJcbiAgICBvbkNsaWNrTWFya2VyOiBvbkNsaWNrTWFya2VyLFxuICB9O1xuXG4gIC8qKlxuICAgKiAgY3JlYXRlIGEgbWFwLCBhZGQgbWFwIGxpc3RlbmVyXG4gICAqL1xuICBhcHAuY29udHJvbGxlci5pbml0QXBwID0gZnVuY3Rpb24gaW5pdEFwcCgpIHtcbiAgICAvLyBpbml0IGdvb2dsZSBtYXBcblxuICAgIGNvbnN0IG1hcCA9ICBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnb29nbGUtbWFwJyksIEdPT0dMRV9NQVBfT1BUSU9OUyk7XG4gICAgYXBwLm1vZGVsLm1hcCA9IG1hcDtcblxuICAgIC8vIFRyeSBIVE1MNSBnZW9sb2NhdGlvblxuICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHtcbiAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIHBvcyA9IHtcbiAgICAgICAgICBsYXQ6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSxcbiAgICAgICAgICBsbmc6IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGVcbiAgICAgICAgfTtcblxuICAgICAgICBtYXAuc2V0Q2VudGVyKHBvcyk7XG4gICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9oYW5kbGVMb2NhdGlvbkVycm9yXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgR2VvbG9jYXRpb25cbiAgICB9XG5cbiAgICBtYXAuYWRkTGlzdGVuZXIoJ2JvdW5kc19jaGFuZ2VkJywgXy50aHJvdHRsZShhcHAuY29udHJvbGxlci5sb2FkUGxhY2VzLCAzMDAwKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGxvYWQgYmFycyBmcm9tIDRzcXVhcmVcbiAgICovXG4gIGFwcC5jb250cm9sbGVyLmxvYWRQbGFjZXMgPSBmdW5jdGlvbiBsb2FkUGxhY2VzKCkge1xuICAgIGNvbnN0IG1hcCA9IGFwcC5tb2RlbC5tYXA7XG5cbiAgICAvLyBkb250IGFzayA0c3F1YXJlIG9uIGJpZyBhcmVhc1xuICAgIGlmIChtYXAuem9vbSA8IDE2KSByZXR1cm47XG5cbiAgICAvL2Rpc3RhbmNlIGJldHdlZW4gdGhpcyBwb2ludCBhbmQgbGFzdCByZXF1ZXN0XG4gICAgbGV0IGRpc3RhbmNlID0gZ29vZ2xlLm1hcHMuZ2VvbWV0cnkuc3BoZXJpY2FsLmNvbXB1dGVEaXN0YW5jZUJldHdlZW4obGFzdFF1ZXJ5TG9jYXRpb24sIG1hcC5jZW50ZXIpO1xuICAgIC8vIGRvbid0IGxvYWQgbmV3IGRhdGEgaWYgcG9pbnQgaXMgdG9vIGNsb3NlIHRvIHByZXZpb3VzIHNlYXJjaFxuICAgIGlmIChkaXN0YW5jZSA8IDEwMDApIHJldHVybjtcbiAgICBsYXN0UXVlcnlMb2NhdGlvbiA9IG1hcC5jZW50ZXI7XG4gICAgYXBwLm1vZGVsLmlzTG9hZGluZyh0cnVlKTtcblxuICAgIC8vIGxvYWQgZGF0YSBmcm9tIGZvdXJzcXVhcmVcbiAgICAvL1RPRE8gaWRlYSwgY2FsY3VsYXRlIHJhZGl1cyBmcm9tIG1hcCB6b29tXG4gICAgY29uc3QgbGF0ID0gbWFwLmNlbnRlci5sYXQoKSxcbiAgICAgICAgICBsbmcgPSBtYXAuY2VudGVyLmxuZygpO1xuICAgIGNvbnN0IEZvdXJzcXVhcmVSZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgIGxsOiBsYXQgKyAnLCcgKyBsbmcsXG4gICAgICByYWRpdXM6IDIwMDAsXG4gICAgICBzZWN0aW9uOiAnZHJpbmtzJyxcbiAgICAgIGNsaWVudF9pZDogJ0U1NEJRMTFMQ1dKMTVRMEZINE1FTElUSTJDWlE1S1NKT1U1M1ROUkFSSjNISE5YTicsXG4gICAgICBjbGllbnRfc2VjcmV0OiAnVDRPMFpVUk1HMDBJR1VUVTROS1NRWjRESDBFNUxHTE1EQUUyME9KV1BYTUJEMTBZJyxcbiAgICAgIHY6IDIwMTYwOTA5XG4gICAgfTtcbiAgICAkLmdldCgnaHR0cHM6Ly9hcGkuZm91cnNxdWFyZS5jb20vdjIvdmVudWVzL2V4cGxvcmUnLCBGb3Vyc3F1YXJlUmVxdWVzdE9wdGlvbnMsIGFwcC5jb250cm9sbGVyLmFkZFBsYWNlcylcbiAgICAgIC5mYWlsKGZ1bmN0aW9uKCl7XG4gICAgICAgIGFwcC5tb2RlbC5pc0ZhaWx1cmVNb2RlbFZpc2libGUodHJ1ZSk7XG4gICAgICB9KVxuICAgICAgLmFsd2F5cyhmdW5jdGlvbigpIHtcbiAgICAgICAgYXBwLm1vZGVsLmlzTG9hZGluZyhmYWxzZSk7XG4gICAgICB9KTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBhZGQgcGxhY2VzIHRvIHRoZSBtYXBcbiAgICogQHBhcmFtIHJlcyAtIHJlc3VsdHMgZnJvbSBmb3Vyc3F1YXJlIHJlcXVlc3RcbiAgICovXG4gIGFwcC5jb250cm9sbGVyLmFkZFBsYWNlcyA9IGZ1bmN0aW9uKHJlcykge1xuICAgIC8vYXBwLm1vZGVsLnBsYWNlcy5yZW1vdmVBbGwoKTtcblxuICAgIHJlcy5yZXNwb25zZS5ncm91cHNbMF0uaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZihhcHAubW9kZWwucGxhY2VzSGFzaC5oYXMoaXRlbS52ZW51ZS5pZCkpIHJldHVybjsgLy8gZG9uJ3QgYWxsb3cgdG8gZG91YmxlIGl0ZW1zIG9uIHRoZSBtYXBcblxuICAgICAgY29uc3QgcGxhY2UgPSBuZXcgUGxhY2UoaXRlbSk7XG4gICAgICBhcHAubW9kZWwucGxhY2VzLnB1c2gocGxhY2UpO1xuICAgICAgYXBwLm1vZGVsLnBsYWNlc0hhc2guc2V0KGl0ZW0udmVudWUuaWQsIHBsYWNlKTtcbiAgICAgIGFwcC5tb2RlbC5tYXJrZXJzLnNldChwbGFjZS5tYXJrZXIsIHBsYWNlKTtcblxuICAgIH0pO1xuXG4gICAgLy8gbm90IG1vcmUgdGhhbiAxNTAgbWFya2VycyBvbiB0aGUgbWFwXG4gICAgbGV0IGxlbmd0aCA9IGFwcC5tb2RlbC5wbGFjZXMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPiAxNTApIGFwcC5jb250cm9sbGVyLnJlbW92ZVBsYWNlc0Zyb21TdGFydChsZW5ndGggLSAxNTApO1xuXG4gICAgYXBwLm1vZGVsLmlzTG9hZGluZyhmYWxzZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIHJlbW92ZSBOIHBsYWNlcyBmb3JtIHRoZSBiZWdpbm5pbmcgb2YgQXJyYXlcbiAgICogQHBhcmFtIE5cbiAgICAgKi9cbiAgYXBwLmNvbnRyb2xsZXIucmVtb3ZlUGxhY2VzRnJvbVN0YXJ0ID0gZnVuY3Rpb24gKE4pIHtcbiAgICBsZXQgcGxhY2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBsYWNlID0gYXBwLm1vZGVsLnBsYWNlcy5zaGlmdCgpO1xuICAgICAgcGxhY2UubWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgIGFwcC5tb2RlbC5wbGFjZXNIYXNoLmRlbGV0ZShwbGFjZS5zdGFzaC52ZW51ZS5pZCk7XG4gICAgICBpZiAoYXBwLm1vZGVsLnBsYWNlSW5Gb2N1cygpID09PSBwbGFjZSkgYXBwLm1vZGVsLnBsYWNlSW5Gb2N1cyhudWxsKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIG1hcCBwbGFjZVxuICAgKiBAcGFyYW0gaXRlbSAtIG9uZSBwbGFjZSBmcm9tIGZvdXJzcXVhcmUgQVBJIHJlc3BvbnNlXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgZnVuY3Rpb24gUGxhY2UoaXRlbSkge1xuICAgIGNvbnN0IG1hcCA9IGFwcC5tb2RlbC5tYXA7XG4gICAgY29uc3QgbGF0ID0gaXRlbS52ZW51ZS5sb2NhdGlvbi5sYXQsXG4gICAgICAgICAgbG5nID0gaXRlbS52ZW51ZS5sb2NhdGlvbi5sbmcsXG4gICAgICAgICAgbmFtZSA9IGl0ZW0udmVudWUubmFtZTtcblxuICAgIHRoaXMuc3Rhc2ggPSBpdGVtO1xuICAgIHRoaXMubG9jYXRpb24gPSB7bGF0LCBsbmd9O1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5pc1NlbGVjdGVkID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gICAgdGhpcy5tYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICAgIG1hcDogbWFwLFxuICAgICAgcG9zaXRpb246IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobGF0LCBsbmcpLFxuICAgICAgaWNvbjogR19NQVJLRVIsXG4gICAgfSk7XG4gICAgdGhpcy5tYXJrZXIuYWRkTGlzdGVuZXIoJ2NsaWNrJywgb25DbGlja01hcmtlcik7XG4gIH1cblxuICAvKipcbiAgICogdXNlciBjbGlja3Mgb24gYSBwbGFjZSBpbiB0aGUgbWVudVxuICAgKiBAcGFyYW0gcGxhY2VcbiAgICovXG4gIGZ1bmN0aW9uIG9uQ2xpY2tQYWxhY2UocGxhY2UpIHtcbiAgICBpZiAoYXBwLm1vZGVsLnNlbGVjdGVkUGxhY2VzLmhhcyhwbGFjZSkpIHJldHVybjtcblxuICAgIC8vIHJlbW92ZSBhbGwgc2VsZWN0ZWRcbiAgICBmb3IgKGxldCBzZWxlY3RlZCBvZiBhcHAubW9kZWwuc2VsZWN0ZWRQbGFjZXMpIHtcbiAgICAgIHNlbGVjdGVkLmlzU2VsZWN0ZWQoZmFsc2UpO1xuICAgICAgc2VsZWN0ZWQubWFya2VyLnNldEljb24oR19NQVJLRVIpO1xuICAgICAgYXBwLm1vZGVsLnNlbGVjdGVkUGxhY2VzLmRlbGV0ZShzZWxlY3RlZCk7XG4gICAgfVxuXG4gICAgLy9hZGQgcGxhY2UgdG8gc2VsZWN0ZWRcbiAgICBwbGFjZS5pc1NlbGVjdGVkKHRydWUpO1xuICAgIGFwcC5tb2RlbC5zZWxlY3RlZFBsYWNlcy5hZGQocGxhY2UpO1xuXG4gICAgLy8gY2hhbmdlIG1hcmtlciBpY29uIGFuZCBzaG93IHBsYWNlIGRldGFpbHMgbW9kYWwgd2luZG93XG4gICAgcGxhY2UubWFya2VyLnNldEljb24oR19NQVJLRVJfU0VMRUNURUQpO1xuICAgIGFwcC5tb2RlbC5wbGFjZUluRm9jdXMocGxhY2UpO1xuICAgIGFwcC5tb2RlbC5pc1BsYWNlSW5Gb2N1c1Zpc2libGUodHJ1ZSk7XG5cbiAgICBhcHAubW9kZWwubWFwLnBhblRvKHBsYWNlLmxvY2F0aW9uKTtcblxuICAgIC8vIGhpZGUgc2lkZSBtZW51IG9uIHNtYWxsIHNjcmVlbnMgYWZ0ZXIgY2xpY2tcbiAgICBpZih3aW5kb3cubWF0Y2hNZWRpYSgnKG1heC13aWR0aDogNDI2cHgpJykubWF0Y2hlcykge1xuICAgICAgJCgnLm1kbC1sYXlvdXRfX2RyYXdlcicpLnJlbW92ZUNsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgICAkKCcubWRsLWxheW91dF9fb2JmdXNjYXRvcicpLnJlbW92ZUNsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHVzZXIgY2xpY2tzIG9uIGEgbWFwIG1hcmtlclxuICAgKi9cbiAgZnVuY3Rpb24gb25DbGlja01hcmtlcigpIHtcbiAgICBjb25zdCBwbGFjZSA9IGFwcC5tb2RlbC5tYXJrZXJzLmdldCh0aGlzKTtcbiAgICBvbkNsaWNrUGFsYWNlKHBsYWNlKTtcbiAgfVxuXG4gIC8vIGluaXQgYXBwIGFmdGVyIGxvYWRpbmcgcGFnZVxuICAkKGZ1bmN0aW9uKCkge1xuICAgIGtvLmFwcGx5QmluZGluZ3MoYXBwLm1vZGVsKTtcbiAgICBhcHAuY29udHJvbGxlci5pbml0QXBwKCk7XG4gIH0pO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

//# sourceMappingURL=main.min.js.map
